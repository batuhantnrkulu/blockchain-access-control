package com.blockchain.accesscontrol.access_control_system.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class TableAccessControlContract extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_ACCESSREQUESTS = "accessRequests";

    public static final String FUNC_APPROVALS = "approvals";

    public static final String FUNC_JUDGECONTRACT = "judgeContract";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_POLİCİES = "policies";

    public static final String FUNC_QUORUMPERCENTAGE = "quorumPercentage";

    public static final String FUNC_REGİSTERCONTRACT = "registerContract";

    public static final String FUNC_RENOUNCEOWNERSHİP = "renounceOwnership";

    public static final String FUNC_ROLEBASEDACCESSCONTROL = "roleBasedAccessControl";

    public static final String FUNC_TRANSFEROWNERSHİP = "transferOwnership";

    public static final String FUNC_POLİCYADD = "policyAdd";

    public static final String FUNC_POLİCYUPDATE = "policyUpdate";

    public static final String FUNC_POLİCYDELETE = "policyDelete";

    public static final String FUNC_GETTİME = "getTime";

    public static final String FUNC_CREATEACCESSREQUEST = "createAccessRequest";

    public static final String FUNC_HANDLEACCESSREQUEST = "handleAccessRequest";

    public static final String FUNC_VİEWGLOBALRESOURCETABLE = "viewGlobalResourceTable";

    public static final String FUNC_EDİTGLOBALRESOURCETABLE = "editGlobalResourceTable";

    public static final String FUNC_DELETEGLOBALRESOURCETABLE = "deleteGlobalResourceTable";

    public static final String FUNC_VİEWLOCALRESOURCETABLE = "viewLocalResourceTable";

    public static final String FUNC_EDİTLOCALRESOURCETABLE = "editLocalResourceTable";

    public static final String FUNC_DELETELOCALRESOURCETABLE = "deleteLocalResourceTable";

    public static final Event ACCESSDENİED_EVENT = new Event("AccessDenied", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ACCESSGRANTED_EVENT = new Event("AccessGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ACCESSREQUESTCREATED_EVENT = new Event("AccessRequestCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event GLOBALRESOURCETABLEVİEWED_EVENT = new Event("GlobalResourceTableViewed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Member>>() {}));
    ;

    public static final Event LOCALRESOURCETABLEVİEWED_EVENT = new Event("LocalResourceTableViewed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Member>>() {}));
    ;

    public static final Event MALİCİOUSACTİVİTYREPORTED_EVENT = new Event("MaliciousActivityReported", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NONPENALİZEMİSBEHAVİORREPORTED_EVENT = new Event("NonPenalizeMisbehaviorReported", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHİPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event POLİCYADDED_EVENT = new Event("PolicyAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event POLİCYDELETED_EVENT = new Event("PolicyDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event POLİCYUPDATED_EVENT = new Event("PolicyUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event RESOLVEADDRESSLOG_EVENT = new Event("ResolveAddressLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected TableAccessControlContract(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TableAccessControlContract(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TableAccessControlContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TableAccessControlContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AccessDeniedEventResponse> getAccessDeniedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCESSDENİED_EVENT, transactionReceipt);
        ArrayList<AccessDeniedEventResponse> responses = new ArrayList<AccessDeniedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccessDeniedEventResponse typedResponse = new AccessDeniedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccessDeniedEventResponse getAccessDeniedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCESSDENİED_EVENT, log);
        AccessDeniedEventResponse typedResponse = new AccessDeniedEventResponse();
        typedResponse.log = log;
        typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AccessDeniedEventResponse> accessDeniedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccessDeniedEventFromLog(log));
    }

    public Flowable<AccessDeniedEventResponse> accessDeniedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCESSDENİED_EVENT));
        return accessDeniedEventFlowable(filter);
    }

    public static List<AccessGrantedEventResponse> getAccessGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCESSGRANTED_EVENT, transactionReceipt);
        ArrayList<AccessGrantedEventResponse> responses = new ArrayList<AccessGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccessGrantedEventResponse typedResponse = new AccessGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.funcName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.funcType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccessGrantedEventResponse getAccessGrantedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCESSGRANTED_EVENT, log);
        AccessGrantedEventResponse typedResponse = new AccessGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.funcName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.funcType = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AccessGrantedEventResponse> accessGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccessGrantedEventFromLog(log));
    }

    public Flowable<AccessGrantedEventResponse> accessGrantedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCESSGRANTED_EVENT));
        return accessGrantedEventFlowable(filter);
    }

    public static List<AccessRequestCreatedEventResponse> getAccessRequestCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCESSREQUESTCREATED_EVENT, transactionReceipt);
        ArrayList<AccessRequestCreatedEventResponse> responses = new ArrayList<AccessRequestCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccessRequestCreatedEventResponse typedResponse = new AccessRequestCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.requester = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.resource = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccessRequestCreatedEventResponse getAccessRequestCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCESSREQUESTCREATED_EVENT, log);
        AccessRequestCreatedEventResponse typedResponse = new AccessRequestCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.requester = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.resource = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AccessRequestCreatedEventResponse> accessRequestCreatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccessRequestCreatedEventFromLog(log));
    }

    public Flowable<AccessRequestCreatedEventResponse> accessRequestCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCESSREQUESTCREATED_EVENT));
        return accessRequestCreatedEventFlowable(filter);
    }

    public static List<GlobalResourceTableViewedEventResponse> getGlobalResourceTableViewedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GLOBALRESOURCETABLEVİEWED_EVENT, transactionReceipt);
        ArrayList<GlobalResourceTableViewedEventResponse> responses = new ArrayList<GlobalResourceTableViewedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GlobalResourceTableViewedEventResponse typedResponse = new GlobalResourceTableViewedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.viewer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.resourceTable = (List<Member>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GlobalResourceTableViewedEventResponse getGlobalResourceTableViewedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GLOBALRESOURCETABLEVİEWED_EVENT, log);
        GlobalResourceTableViewedEventResponse typedResponse = new GlobalResourceTableViewedEventResponse();
        typedResponse.log = log;
        typedResponse.viewer = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.resourceTable = (List<Member>) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GlobalResourceTableViewedEventResponse> globalResourceTableViewedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGlobalResourceTableViewedEventFromLog(log));
    }

    public Flowable<GlobalResourceTableViewedEventResponse> globalResourceTableViewedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GLOBALRESOURCETABLEVİEWED_EVENT));
        return globalResourceTableViewedEventFlowable(filter);
    }

    public static List<LocalResourceTableViewedEventResponse> getLocalResourceTableViewedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LOCALRESOURCETABLEVİEWED_EVENT, transactionReceipt);
        ArrayList<LocalResourceTableViewedEventResponse> responses = new ArrayList<LocalResourceTableViewedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LocalResourceTableViewedEventResponse typedResponse = new LocalResourceTableViewedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.viewer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.resourceTable = (List<Member>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LocalResourceTableViewedEventResponse getLocalResourceTableViewedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LOCALRESOURCETABLEVİEWED_EVENT, log);
        LocalResourceTableViewedEventResponse typedResponse = new LocalResourceTableViewedEventResponse();
        typedResponse.log = log;
        typedResponse.viewer = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.resourceTable = (List<Member>) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<LocalResourceTableViewedEventResponse> localResourceTableViewedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLocalResourceTableViewedEventFromLog(log));
    }

    public Flowable<LocalResourceTableViewedEventResponse> localResourceTableViewedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOCALRESOURCETABLEVİEWED_EVENT));
        return localResourceTableViewedEventFlowable(filter);
    }

    public static List<MaliciousActivityReportedEventResponse> getMaliciousActivityReportedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MALİCİOUSACTİVİTYREPORTED_EVENT, transactionReceipt);
        ArrayList<MaliciousActivityReportedEventResponse> responses = new ArrayList<MaliciousActivityReportedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MaliciousActivityReportedEventResponse typedResponse = new MaliciousActivityReportedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subject = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.penaltyAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockingEndTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MaliciousActivityReportedEventResponse getMaliciousActivityReportedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MALİCİOUSACTİVİTYREPORTED_EVENT, log);
        MaliciousActivityReportedEventResponse typedResponse = new MaliciousActivityReportedEventResponse();
        typedResponse.log = log;
        typedResponse.subject = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.penaltyAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.reason = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.blockingEndTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<MaliciousActivityReportedEventResponse> maliciousActivityReportedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMaliciousActivityReportedEventFromLog(log));
    }

    public Flowable<MaliciousActivityReportedEventResponse> maliciousActivityReportedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MALİCİOUSACTİVİTYREPORTED_EVENT));
        return maliciousActivityReportedEventFlowable(filter);
    }

    public static List<NonPenalizeMisbehaviorReportedEventResponse> getNonPenalizeMisbehaviorReportedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NONPENALİZEMİSBEHAVİORREPORTED_EVENT, transactionReceipt);
        ArrayList<NonPenalizeMisbehaviorReportedEventResponse> responses = new ArrayList<NonPenalizeMisbehaviorReportedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NonPenalizeMisbehaviorReportedEventResponse typedResponse = new NonPenalizeMisbehaviorReportedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subject = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.rewardAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newStatus = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NonPenalizeMisbehaviorReportedEventResponse getNonPenalizeMisbehaviorReportedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NONPENALİZEMİSBEHAVİORREPORTED_EVENT, log);
        NonPenalizeMisbehaviorReportedEventResponse typedResponse = new NonPenalizeMisbehaviorReportedEventResponse();
        typedResponse.log = log;
        typedResponse.subject = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.rewardAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newStatus = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<NonPenalizeMisbehaviorReportedEventResponse> nonPenalizeMisbehaviorReportedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNonPenalizeMisbehaviorReportedEventFromLog(log));
    }

    public Flowable<NonPenalizeMisbehaviorReportedEventResponse> nonPenalizeMisbehaviorReportedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NONPENALİZEMİSBEHAVİORREPORTED_EVENT));
        return nonPenalizeMisbehaviorReportedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHİPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PolicyAddedEventResponse> getPolicyAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(POLİCYADDED_EVENT, transactionReceipt);
        ArrayList<PolicyAddedEventResponse> responses = new ArrayList<PolicyAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PolicyAddedEventResponse typedResponse = new PolicyAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.resource = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.action = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.permission = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PolicyAddedEventResponse getPolicyAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(POLİCYADDED_EVENT, log);
        PolicyAddedEventResponse typedResponse = new PolicyAddedEventResponse();
        typedResponse.log = log;
        typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.role = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.resource = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.action = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.permission = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<PolicyAddedEventResponse> policyAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPolicyAddedEventFromLog(log));
    }

    public Flowable<PolicyAddedEventResponse> policyAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(POLİCYADDED_EVENT));
        return policyAddedEventFlowable(filter);
    }

    public static List<PolicyDeletedEventResponse> getPolicyDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(POLİCYDELETED_EVENT, transactionReceipt);
        ArrayList<PolicyDeletedEventResponse> responses = new ArrayList<PolicyDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PolicyDeletedEventResponse typedResponse = new PolicyDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PolicyDeletedEventResponse getPolicyDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(POLİCYDELETED_EVENT, log);
        PolicyDeletedEventResponse typedResponse = new PolicyDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PolicyDeletedEventResponse> policyDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPolicyDeletedEventFromLog(log));
    }

    public Flowable<PolicyDeletedEventResponse> policyDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(POLİCYDELETED_EVENT));
        return policyDeletedEventFlowable(filter);
    }

    public static List<PolicyUpdatedEventResponse> getPolicyUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(POLİCYUPDATED_EVENT, transactionReceipt);
        ArrayList<PolicyUpdatedEventResponse> responses = new ArrayList<PolicyUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PolicyUpdatedEventResponse typedResponse = new PolicyUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.resource = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.action = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.permission = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PolicyUpdatedEventResponse getPolicyUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(POLİCYUPDATED_EVENT, log);
        PolicyUpdatedEventResponse typedResponse = new PolicyUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.policyId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.role = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.resource = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.action = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.permission = (String) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<PolicyUpdatedEventResponse> policyUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPolicyUpdatedEventFromLog(log));
    }

    public Flowable<PolicyUpdatedEventResponse> policyUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(POLİCYUPDATED_EVENT));
        return policyUpdatedEventFlowable(filter);
    }

    public static List<ResolveAddressLogEventResponse> getResolveAddressLogEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RESOLVEADDRESSLOG_EVENT, transactionReceipt);
        ArrayList<ResolveAddressLogEventResponse> responses = new ArrayList<ResolveAddressLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResolveAddressLogEventResponse typedResponse = new ResolveAddressLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.resolvedAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ResolveAddressLogEventResponse getResolveAddressLogEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RESOLVEADDRESSLOG_EVENT, log);
        ResolveAddressLogEventResponse typedResponse = new ResolveAddressLogEventResponse();
        typedResponse.log = log;
        typedResponse.resolvedAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ResolveAddressLogEventResponse> resolveAddressLogEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getResolveAddressLogEventFromLog(log));
    }

    public Flowable<ResolveAddressLogEventResponse> resolveAddressLogEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESOLVEADDRESSLOG_EVENT));
        return resolveAddressLogEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, BigInteger, String, Boolean, Boolean, BigInteger>> accessRequests(
            BigInteger param0) {
        final Function function = new Function(FUNC_ACCESSREQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, BigInteger, String, Boolean, Boolean, BigInteger>>(function,
                new Callable<Tuple8<BigInteger, String, String, BigInteger, String, Boolean, Boolean, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, BigInteger, String, Boolean, Boolean, BigInteger> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, BigInteger, String, Boolean, Boolean, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> approvals(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_APPROVALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> judgeContract() {
        final Function function = new Function(FUNC_JUDGECONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, String, String, String, BigInteger>> policies(
            BigInteger param0) {
        final Function function = new Function(FUNC_POLİCİES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, String, String, String, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> quorumPercentage() {
        final Function function = new Function(FUNC_QUORUMPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> registerContract() {
        final Function function = new Function(FUNC_REGİSTERCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHİP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> roleBasedAccessControl() {
        final Function function = new Function(FUNC_ROLEBASEDACCESSCONTROL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHİP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> policyAdd(BigInteger role, String resource,
            String action, String permission) {
        final Function function = new Function(
                FUNC_POLİCYADD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(role), 
                new org.web3j.abi.datatypes.Utf8String(resource), 
                new org.web3j.abi.datatypes.Utf8String(action), 
                new org.web3j.abi.datatypes.Utf8String(permission)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> policyUpdate(BigInteger policyId, BigInteger role,
            String resource, String action, String permission) {
        final Function function = new Function(
                FUNC_POLİCYUPDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(policyId), 
                new org.web3j.abi.datatypes.generated.Uint8(role), 
                new org.web3j.abi.datatypes.Utf8String(resource), 
                new org.web3j.abi.datatypes.Utf8String(action), 
                new org.web3j.abi.datatypes.Utf8String(permission)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> policyDelete(BigInteger policyId) {
        final Function function = new Function(
                FUNC_POLİCYDELETE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(policyId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, Boolean>> getTime() {
        final Function function = new Function(FUNC_GETTİME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, Boolean>>(function,
                new Callable<Tuple2<BigInteger, Boolean>>() {
                    @Override
                    public Tuple2<BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAccessRequest(String resource,
            String action) {
        final Function function = new Function(
                FUNC_CREATEACCESSREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(resource), 
                new org.web3j.abi.datatypes.Utf8String(action)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> handleAccessRequest(BigInteger requestId,
            Boolean approve) {
        final Function function = new Function(
                FUNC_HANDLEACCESSREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Bool(approve)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> viewGlobalResourceTable() {
        final Function function = new Function(
                FUNC_VİEWGLOBALRESOURCETABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> editGlobalResourceTable(String account1,
            String account2) {
        final Function function = new Function(
                FUNC_EDİTGLOBALRESOURCETABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account1), 
                new org.web3j.abi.datatypes.Address(160, account2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteGlobalResourceTable(String account) {
        final Function function = new Function(
                FUNC_DELETEGLOBALRESOURCETABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> viewLocalResourceTable() {
        final Function function = new Function(
                FUNC_VİEWLOCALRESOURCETABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> editLocalResourceTable(String account1,
            String account2) {
        final Function function = new Function(
                FUNC_EDİTLOCALRESOURCETABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account1), 
                new org.web3j.abi.datatypes.Address(160, account2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteLocalResourceTable(String account) {
        final Function function = new Function(
                FUNC_DELETELOCALRESOURCETABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TableAccessControlContract load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TableAccessControlContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TableAccessControlContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TableAccessControlContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TableAccessControlContract load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TableAccessControlContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TableAccessControlContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TableAccessControlContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TableAccessControlContract> deploy(Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider,
            String _roleBasedAccessControl, String _judgeContract, String _registerContract,
            String initialOwner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, initialOwner)));
        return deployRemoteCall(TableAccessControlContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TableAccessControlContract> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _roleBasedAccessControl, String _judgeContract, String _registerContract,
            String initialOwner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, initialOwner)));
        return deployRemoteCall(TableAccessControlContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TableAccessControlContract> deploy(Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit,
            String _roleBasedAccessControl, String _judgeContract, String _registerContract,
            String initialOwner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, initialOwner)));
        return deployRemoteCall(TableAccessControlContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TableAccessControlContract> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _roleBasedAccessControl, String _judgeContract, String _registerContract,
            String initialOwner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, initialOwner)));
        return deployRemoteCall(TableAccessControlContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Member extends DynamicStruct {
        public String memberAddress;

        public String name;

        public String memberType;

        public String status;

        public BigInteger lastStatusUpdate;

        public BigInteger role;

        public Member(String memberAddress, String name, String memberType, String status,
                BigInteger lastStatusUpdate, BigInteger role) {
            super(new org.web3j.abi.datatypes.Address(160, memberAddress), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.Utf8String(memberType), 
                    new org.web3j.abi.datatypes.Utf8String(status), 
                    new org.web3j.abi.datatypes.generated.Uint256(lastStatusUpdate), 
                    new org.web3j.abi.datatypes.generated.Uint8(role));
            this.memberAddress = memberAddress;
            this.name = name;
            this.memberType = memberType;
            this.status = status;
            this.lastStatusUpdate = lastStatusUpdate;
            this.role = role;
        }

        public Member(Address memberAddress, Utf8String name, Utf8String memberType,
                Utf8String status, Uint256 lastStatusUpdate, Uint8 role) {
            super(memberAddress, name, memberType, status, lastStatusUpdate, role);
            this.memberAddress = memberAddress.getValue();
            this.name = name.getValue();
            this.memberType = memberType.getValue();
            this.status = status.getValue();
            this.lastStatusUpdate = lastStatusUpdate.getValue();
            this.role = role.getValue();
        }
    }

    public static class AccessDeniedEventResponse extends BaseEventResponse {
        public String requester;

        public String reason;
    }

    public static class AccessGrantedEventResponse extends BaseEventResponse {
        public String requester;

        public String funcName;

        public String funcType;
    }

    public static class AccessRequestCreatedEventResponse extends BaseEventResponse {
        public BigInteger requestId;

        public String requester;

        public String contractAddress;

        public String resource;
    }

    public static class GlobalResourceTableViewedEventResponse extends BaseEventResponse {
        public String viewer;

        public List<Member> resourceTable;
    }

    public static class LocalResourceTableViewedEventResponse extends BaseEventResponse {
        public String viewer;

        public List<Member> resourceTable;
    }

    public static class MaliciousActivityReportedEventResponse extends BaseEventResponse {
        public String subject;

        public BigInteger penaltyAmount;

        public String reason;

        public BigInteger blockingEndTime;
    }

    public static class NonPenalizeMisbehaviorReportedEventResponse extends BaseEventResponse {
        public String subject;

        public BigInteger rewardAmount;

        public String newStatus;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PolicyAddedEventResponse extends BaseEventResponse {
        public BigInteger policyId;

        public BigInteger role;

        public String resource;

        public String action;

        public String permission;
    }

    public static class PolicyDeletedEventResponse extends BaseEventResponse {
        public BigInteger policyId;
    }

    public static class PolicyUpdatedEventResponse extends BaseEventResponse {
        public BigInteger policyId;

        public BigInteger role;

        public String resource;

        public String action;

        public String permission;
    }

    public static class ResolveAddressLogEventResponse extends BaseEventResponse {
        public String resolvedAddress;

        public String name;
    }
}
