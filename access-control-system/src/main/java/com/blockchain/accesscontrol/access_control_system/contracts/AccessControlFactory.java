package com.blockchain.accesscontrol.access_control_system.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class AccessControlFactory extends Contract {
    public static final String BINARY = "0x608060405234801561000f575f80fd5b5060405161319c38038061319c83398101604081905261002e91610113565b836001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610065816100a9565b50600180546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556003805491909316911617905550610164565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461010e575f80fd5b919050565b5f805f8060808587031215610126575f80fd5b61012f856100f8565b935061013d602086016100f8565b925061014b604086016100f8565b9150610159606086016100f8565b905092959194509250565b61302b806101715f395ff3fe608060405234801562000010575f80fd5b506004361062000084575f3560e01c806389d4e103116200005f57806389d4e10314620000d85780638da5cb5b14620000ef578063d6b683fc1462000100578063f2fde38b1462000114575f80fd5b80630c317f061462000088578063715018a614620000b85780637feffff314620000c4575b5f80fd5b6001546200009c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b620000c26200012b565b005b6002546200009c906001600160a01b031681565b6200009c620000e936600462000591565b62000142565b5f546001600160a01b03166200009c565b6003546200009c906001600160a01b031681565b620000c2620001253660046200066a565b62000493565b62000135620004d6565b620001405f62000504565b565b60015460405163deb2bbef60e01b81526001600160a01b03848116600483015285811660248301525f92169063deb2bbef90604401602060405180830381865afa15801562000193573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001b991906200068d565b620002425760405162461bcd60e51b815260206004820152604860248201527f5375626a65637420616e64204f626a656374206d75737420626520696e20746860448201527f652073616d652067726f7570206f7220696e20676c6f62616c207265736f75726064820152676365207461626c6560c01b608482015260a4015b60405180910390fd5b60025460405163716e89e560e11b81526001600160a01b039091169063e2dd13ca906200027890879087908790600401620006f3565b602060405180830381865afa15801562000294573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002ba91906200068d565b1562000331576040805162461bcd60e51b81526020600482015260248101919091527f4572726f723a20416363657373436f6e74726f6c436f6e747261637420616c7260448201527f656164792065786973747320666f72207468697320636f6d62696e6174696f6e606482015260840162000239565b5f83858460015f9054906101000a90046001600160a01b031633604051620003599062000553565b6200036995949392919062000729565b604051809103905ff08015801562000383573d5f803e3d5ffd5b50600354604051630f03d96d60e41b81526001600160a01b03918216600482015291925082169063f03d96d0906024015f604051808303815f87803b158015620003cb575f80fd5b505af1158015620003de573d5f803e3d5ffd5b50506002546040516329cba93360e11b81526001600160a01b039091169250635397526691506200041a9088908890889087906004016200076e565b5f604051808303815f87803b15801562000432575f80fd5b505af115801562000445573d5f803e3d5ffd5b5050604080516001600160a01b03851681523360208201527ffae712e212a1fa7ded47c40c88a1c2aab5dcb4942a1852ac75d9565b5b85741a935001905060405180910390a1949350505050565b6200049d620004d6565b6001600160a01b038116620004c857604051631e4fbdf760e01b81525f600482015260240162000239565b620004d38162000504565b50565b5f546001600160a01b03163314620001405760405163118cdaa760e01b815233600482015260240162000239565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61284880620007ae83390190565b80356001600160a01b038116811462000578575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215620005a4575f80fd5b620005af8462000561565b9250620005bf6020850162000561565b9150604084013567ffffffffffffffff80821115620005dc575f80fd5b818601915086601f830112620005f0575f80fd5b8135818111156200060557620006056200057d565b604051601f8201601f19908116603f011681019083821181831017156200063057620006306200057d565b8160405282815289602084870101111562000649575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f602082840312156200067b575f80fd5b620006868262000561565b9392505050565b5f602082840312156200069e575f80fd5b8151801515811462000686575f80fd5b5f81518084525f5b81811015620006d457602081850181015186830182015201620006b6565b505f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038481168252831660208201526060604082018190525f906200072090830184620006ae565b95945050505050565b5f60018060a01b038088168352808716602084015260a060408401526200075460a0840187620006ae565b948116606084015292909216608090910152509392505050565b5f60018060a01b038087168352808616602084015260806040840152620007996080840186620006ae565b91508084166060840152509594505050505056fe6080604052603c6003556004805460ff191660011790556201518060085534801562000029575f80fd5b5060405162002848380380620028488339810160408190526200004c9162000101565b600280546001600160a01b038085166001600160a01b0319928316179092556004805488841661010002610100600160a81b031990911617905560058054928716929091169190911790556006620000a58482620002a4565b50600780546001600160a01b0319166001600160a01b0392909216919091179055506200036c92505050565b80516001600160a01b0381168114620000e8575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f805f60a0868803121562000116575f80fd5b6200012186620000d1565b9450602062000132818801620000d1565b60408801519095506001600160401b03808211156200014f575f80fd5b818901915089601f83011262000163575f80fd5b815181811115620001785762000178620000ed565b604051601f8201601f19908116603f01168101908382118183101715620001a357620001a3620000ed565b816040528281528c86848701011115620001bb575f80fd5b5f93505b82841015620001de5784840186015181850187015292850192620001bf565b5f868483010152809850505050505050620001fc60608701620000d1565b91506200020c60808701620000d1565b90509295509295909350565b600181811c908216806200022d57607f821691505b6020821081036200024c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200029f575f81815260208120601f850160051c810160208610156200027a5750805b601f850160051c820191505b818110156200029b5782815560010162000286565b5050505b505050565b81516001600160401b03811115620002c057620002c0620000ed565b620002d881620002d1845462000218565b8462000252565b602080601f8311600181146200030e575f8415620002f65750858301515b5f19600386901b1c1916600185901b1785556200029b565b5f85815260208120601f198616915b828110156200033e578886015182559484019460019091019084016200031d565b50858210156200035c57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6124ce806200037a5f395ff3fe608060405234801561000f575f80fd5b5060043610610111575f3560e01c806358dbc45d1161009e578063a51b71361161006e578063a51b713614610235578063bca353be14610248578063d3e8948314610250578063d6b683fc14610274578063f03d96d014610287575f80fd5b806358dbc45d146101ef5780636391b4881461020757806378f475011461021a5780638fda356d1461022d575f80fd5b806322f3e2d4116100e457806322f3e2d414610192578063235fd7e21461019f57806342cde4e8146101b257806348d33ef2146101c9578063557ed1ba146101d2575f80fd5b806302d05d3f146101155780630d9f7ed4146101455780631073d7c11461015a5780631e3b70b41461017d575b5f80fd5b600754610128906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610158610153366004611c6b565b61029a565b005b61016d610168366004611d09565b610596565b604051901515815260200161013c565b61018561101b565b60405161013c9190611db6565b60045461016d9060ff1681565b6101586101ad366004611dcf565b6110a7565b6101bb60035481565b60405190815260200161013c565b6101bb60085481565b6101da611310565b6040805192835290151560208301520161013c565b6004546101289061010090046001600160a01b031681565b610158610215366004611de6565b611396565b600554610128906001600160a01b031681565b610158611640565b600254610128906001600160a01b031681565b6101586117f5565b61026361025e366004611dcf565b611926565b60405161013c959493929190611eaf565b600154610128906001600160a01b031681565b610158610295366004611f07565b611afb565b60045460ff166102c55760405162461bcd60e51b81526004016102bc90611f2d565b60405180910390fd5b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa15801561030b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061032f9190611f5d565b90508042116103505760405162461bcd60e51b81526004016102bc90611f74565b60408051808201909152601b81525f8051602061245983398151915260208201526007546001600160a01b0316331461043b5760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce906103b99033908890600401611fbc565b5f604051808303815f875af11580156103d4573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103fb9190810190612029565b925092509250336001600160a01b03165f8051602061247983398151915284848460405161042b93929190612075565b60405180910390a250505061058d565b5f5487106104835760405162461bcd60e51b8152602060048201526015602482015274141bdb1a58de48191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016102bc565b6040518060a001604052808760048111156104a0576104a0611e7b565b81526020018681526020018581526020018481526020015f8152505f88815481106104cd576104cd61209d565b5f918252602090912082516005909202018054909190829060ff191660018360048111156104fd576104fd611e7b565b021790555060208201516001820190610516908261212e565b506040820151600282019061052b908261212e565b5060608201516003820190610540908261212e565b5060808201518160040155905050867f4a878bb267cedaa636258d749db7a5ac8f0cc2338419d6b0429443d8a11d54708787878760405161058494939291906121ea565b60405180910390a25b50505050505050565b6004545f9060ff166105ba5760405162461bcd60e51b81526004016102bc90611f2d565b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa158015610600573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106249190611f5d565b90508042116106455760405162461bcd60e51b81526004016102bc90611f74565b60045461010090046001600160a01b0316331461069c5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881a5cc81b9bdd081cdd589a9958dd605a1b60448201526064016102bc565b600254604051634427673360e01b81523360048201525f916001600160a01b031690634427673390602401602060405180830381865afa1580156106e2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610706919061223a565b90505f5b5f54811015610d8f5781600481111561072557610725611e7b565b5f82815481106107375761073761209d565b5f91825260209091206005909102015460ff16600481111561075b5761075b611e7b565b1480156107a3575085805190602001205f828154811061077d5761077d61209d565b905f5260205f2090600502016001016040516107999190612255565b6040518091039020145b80156107ea575084805190602001205f82815481106107c4576107c461209d565b905f5260205f2090600502016002016040516107e09190612255565b6040518091039020145b15610d7d576003545f82815481106108045761080461209d565b905f5260205f2090600502016004015461081e91906122db565b421015610912576001546040805163626f80e760e11b815233600482015260248101919091526013604482015272546f6f206672657175656e742061636365737360681b60648201525f91829182916001600160a01b03169063c4df01ce906084015f604051808303815f875af115801561089b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108c29190810190612029565b600454604051939650919450925061010090046001600160a01b0316905f80516020612479833981519152906108fd90869086908690612075565b60405180910390a25f96505050505050611014565b425f82815481106109255761092561209d565b905f5260205f20906005020160040181905550600460019054906101000a90046001600160a01b03166001600160a01b03167f5003ba6da275d66409e57db43f48416fff9168f7954c0da01fb2ffb3112c45a883888860405180604001604052806005815260200164616c6c6f7760d81b815250805190602001205f87815481106109b2576109b261209d565b905f5260205f2090600502016003016040516109ce9190612255565b6040519081900381206109e59594939214906122f4565b60405180910390a2604080518082019091526005815264616c6c6f7760d81b6020909101525f80547fbcec4be69db00d4d20952ae27cd2494b0e3bf401159e19fb6165a3f0849ef94090829084908110610a4157610a4161209d565b905f5260205f209060050201600301604051610a5d9190612255565b60405180910390201490508015610b2d5760015460405163078d274760e21b81523360048201525f9182916001600160a01b0390911690631e349d1c906024015f604051808303815f875af1158015610ab8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610adf9190810190612339565b91509150336001600160a01b03167f99160c89fdccb67e1961cf554a10fffb3dbbb7b2cd44a817f2aac33deb57d9d78383604051610b1e929190612373565b60405180910390a25050610d73565b60408051808201909152600481526319591a5d60e21b6020918201528651908701207fc1430af76e820ac7237bd100fccc681bfa953ee7522bb693b2fa2a71f1beafdd1480610bbe575060408051808201909152600681526564656c65746560d01b6020918201528651908701207f9fcba1e1e2be1b4668ce9e58bf81b52190e4098ed5452612e77505295dfbca56145b15610c795760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce90610bf790339060040161238b565b5f604051808303815f875af1158015610c12573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c399190810190612029565b925092509250336001600160a01b03165f80516020612479833981519152848484604051610c6993929190612075565b60405180910390a2505050610d73565b6040805180820190915260048152637669657760e01b6020918201528651908701207f5d4381bb4a4c75c843c4d35f8b5a6677e24c2b3b8c8ec346faaa6201d8dd576a01610d735760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce90610cf59033906004016123ca565b5f604051808303815f875af1158015610d10573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d379190810190612029565b925092509250336001600160a01b03165f80516020612479833981519152848484604051610d6793929190612075565b60405180910390a25050505b9350611014915050565b80610d8781612400565b91505061070a565b5060408051808201909152600481526319591a5d60e21b6020918201528451908501207fc1430af76e820ac7237bd100fccc681bfa953ee7522bb693b2fa2a71f1beafdd1480610e21575060408051808201909152600681526564656c65746560d01b6020918201528451908501207f9fcba1e1e2be1b4668ce9e58bf81b52190e4098ed5452612e77505295dfbca56145b15610edc5760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce90610e5a90339060040161238b565b5f604051808303815f875af1158015610e75573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e9c9190810190612029565b925092509250336001600160a01b03165f80516020612479833981519152848484604051610ecc93929190612075565b60405180910390a2505050610fd6565b6040805180820190915260048152637669657760e01b6020918201528451908501207f5d4381bb4a4c75c843c4d35f8b5a6677e24c2b3b8c8ec346faaa6201d8dd576a01610fd65760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce90610f589033906004016123ca565b5f604051808303815f875af1158015610f73573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f9a9190810190612029565b925092509250336001600160a01b03165f80516020612479833981519152848484604051610fca93929190612075565b60405180910390a25050505b7f38df3a8dddf6ef31501df5a214b30fe934ac5f4ed0cd1b5bc31f44752486c6ac8585604051611007929190612418565b60405180910390a15f9250505b5092915050565b60068054611028906120b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611054906120b1565b801561109f5780601f106110765761010080835404028352916020019161109f565b820191905f5260205f20905b81548152906001019060200180831161108257829003601f168201915b505050505081565b60045460ff166110c95760405162461bcd60e51b81526004016102bc90611f2d565b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa15801561110f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111339190611f5d565b90508042116111545760405162461bcd60e51b81526004016102bc90611f74565b60408051808201909152601b81525f8051602061245983398151915260208201526007546001600160a01b0316331461123f5760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce906111bd9033908890600401611fbc565b5f604051808303815f875af11580156111d8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526111ff9190810190612029565b925092509250336001600160a01b03165f8051602061247983398151915284848460405161122f93929190612075565b60405180910390a2505050505050565b5f5483106112875760405162461bcd60e51b8152602060048201526015602482015274141bdb1a58de48191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016102bc565b5f83815481106112995761129961209d565b5f91825260208220600590910201805460ff19168155906112bd6001830182611b4f565b6112ca600283015f611b4f565b6112d7600383015f611b4f565b505f60049190910181905560405184917f433ab09ab993382af577c4a70f77dcc7cf149b5b52eb40d19b869664bfb5496d91a25b505050565b6001546040516301c2084f60e31b81523360048201525f91829182916001600160a01b031690630e10427890602401602060405180830381865afa15801561135a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061137e9190611f5d565b90505f8142101561138d575060015b90939092509050565b60045460ff166113b85760405162461bcd60e51b81526004016102bc90611f2d565b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa1580156113fe573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114229190611f5d565b90508042116114435760405162461bcd60e51b81526004016102bc90611f74565b60408051808201909152601b81525f8051602061245983398151915260208201526007546001600160a01b0316331461152e5760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce906114ac9033908890600401611fbc565b5f604051808303815f875af11580156114c7573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526114ee9190810190612029565b925092509250336001600160a01b03165f8051602061247983398151915284848460405161151e93929190612075565b60405180910390a2505050611638565b5f6040518060a0016040528088600481111561154c5761154c611e7b565b8152602080820189905260408201889052606082018790525f608090920182905283546001818101865594835291208251600590920201805492939092839160ff19909116908360048111156115a4576115a4611e7b565b0217905550602082015160018201906115bd908261212e565b50604082015160028201906115d2908261212e565b50606082015160038201906115e7908261212e565b50608091909101516004909101555f5461160390600190612445565b7fb90b27d205996a6ce127fc2f1bfbad17d5d8270e9a27ebb35037f2d67853b6cf8787878760405161122f94939291906121ea565b505050505050565b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa158015611686573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116aa9190611f5d565b90508042116116cb5760405162461bcd60e51b81526004016102bc90611f74565b60408051808201909152601181527044656e69616c206f66205365727669636560781b60208201526007546001600160a01b031633146117bc5760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce9061173b9033908890600401611fbc565b5f604051808303815f875af1158015611756573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261177d9190810190612029565b925092509250336001600160a01b03165f805160206124798339815191528484846040516117ad93929190612075565b60405180910390a25050505050565b6004805460ff191660011790556040517fe09eb0ac9bad92f05e0b489e6fc1d3e349861ffd8a2548182ef06278968a9bd0905f90a15050565b6001546040516301c2084f60e31b81523360048201525f916001600160a01b031690630e10427890602401602060405180830381865afa15801561183b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061185f9190611f5d565b90508042116118805760405162461bcd60e51b81526004016102bc90611f74565b60408051808201909152601181527044656e69616c206f66205365727669636560781b60208201526007546001600160a01b031633146118f05760015460405163626f80e760e11b81525f91829182916001600160a01b03169063c4df01ce9061173b9033908890600401611fbc565b6004805460ff191690556040517f8c8771d60e1ae6b90556d35dc2f79a3190d6b4088c05d7ca8cabbb9e9061f3e5905f90a15050565b5f8181548110611934575f80fd5b5f9182526020909120600590910201805460018201805460ff90921693509061195c906120b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611988906120b1565b80156119d35780601f106119aa576101008083540402835291602001916119d3565b820191905f5260205f20905b8154815290600101906020018083116119b657829003601f168201915b5050505050908060020180546119e8906120b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a14906120b1565b8015611a5f5780601f10611a3657610100808354040283529160200191611a5f565b820191905f5260205f20905b815481529060010190602001808311611a4257829003601f168201915b505050505090806003018054611a74906120b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa0906120b1565b8015611aeb5780601f10611ac257610100808354040283529160200191611aeb565b820191905f5260205f20905b815481529060010190602001808311611ace57829003601f168201915b5050505050908060040154905085565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f60aef7237739f69cdef5dd8e8f90780ef1f3f6d76024d66e168102d04e88b5f49060200160405180910390a150565b508054611b5b906120b1565b5f825580601f10611b6a575050565b601f0160209004905f5260205f2090810190611b869190611b89565b50565b5b80821115611b9d575f8155600101611b8a565b5090565b60058110611b86575f80fd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bea57611bea611bad565b604052919050565b5f67ffffffffffffffff821115611c0b57611c0b611bad565b50601f01601f191660200190565b5f82601f830112611c28575f80fd5b8135611c3b611c3682611bf2565b611bc1565b818152846020838601011115611c4f575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a08688031215611c7f575f80fd5b853594506020860135611c9181611ba1565b9350604086013567ffffffffffffffff80821115611cad575f80fd5b611cb989838a01611c19565b94506060880135915080821115611cce575f80fd5b611cda89838a01611c19565b93506080880135915080821115611cef575f80fd5b50611cfc88828901611c19565b9150509295509295909350565b5f8060408385031215611d1a575f80fd5b823567ffffffffffffffff80821115611d31575f80fd5b611d3d86838701611c19565b93506020850135915080821115611d52575f80fd5b50611d5f85828601611c19565b9150509250929050565b5f5b83811015611d83578181015183820152602001611d6b565b50505f910152565b5f8151808452611da2816020860160208601611d69565b601f01601f19169290920160200192915050565b602081525f611dc86020830184611d8b565b9392505050565b5f60208284031215611ddf575f80fd5b5035919050565b5f805f8060808587031215611df9575f80fd5b8435611e0481611ba1565b9350602085013567ffffffffffffffff80821115611e20575f80fd5b611e2c88838901611c19565b94506040870135915080821115611e41575f80fd5b611e4d88838901611c19565b93506060870135915080821115611e62575f80fd5b50611e6f87828801611c19565b91505092959194509250565b634e487b7160e01b5f52602160045260245ffd5b60058110611eab57634e487b7160e01b5f52602160045260245ffd5b9052565b611eb98187611e8f565b60a060208201525f611ece60a0830187611d8b565b8281036040840152611ee08187611d8b565b90508281036060840152611ef48186611d8b565b9150508260808301529695505050505050565b5f60208284031215611f17575f80fd5b81356001600160a01b0381168114611dc8575f80fd5b602080825260169082015275436f6e7472616374206973206e6f742061637469766560501b604082015260600190565b5f60208284031215611f6d575f80fd5b5051919050565b60208082526028908201527f416363657373436f6e74726f6c436f6e74726163743a204d656d62657220697360408201526708189b1bd8dad95960c21b606082015260800190565b6001600160a01b03831681526040602082018190525f90611fdf90830184611d8b565b949350505050565b5f82601f830112611ff6575f80fd5b8151612004611c3682611bf2565b818152846020838601011115612018575f80fd5b611fdf826020830160208701611d69565b5f805f6060848603121561203b575f80fd5b83519250602084015167ffffffffffffffff811115612058575f80fd5b61206486828701611fe7565b925050604084015190509250925092565b838152606060208201525f61208d6060830185611d8b565b9050826040830152949350505050565b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806120c557607f821691505b6020821081036120e357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561130b575f81815260208120601f850160051c8101602086101561210f5750805b601f850160051c820191505b818110156116385782815560010161211b565b815167ffffffffffffffff81111561214857612148611bad565b61215c8161215684546120b1565b846120e9565b602080601f83116001811461218f575f84156121785750858301515b5f19600386901b1c1916600185901b178555611638565b5f85815260208120601f198616915b828110156121bd5788860151825594840194600190910190840161219e565b50858210156121da57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6121f48186611e8f565b608060208201525f6122096080830186611d8b565b828103604084015261221b8186611d8b565b9050828103606084015261222f8185611d8b565b979650505050505050565b5f6020828403121561224a575f80fd5b8151611dc881611ba1565b5f808354612262816120b1565b6001828116801561227a576001811461228f576122bb565b60ff19841687528215158302870194506122bb565b875f526020805f205f5b858110156122b25781548a820152908401908201612299565b50505082870194505b50929695505050505050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156122ee576122ee6122c7565b92915050565b6122fe8186611e8f565b608060208201525f6123136080830186611d8b565b82810360408401526123258186611d8b565b915050821515606083015295945050505050565b5f806040838503121561234a575f80fd5b82519150602083015167ffffffffffffffff811115612367575f80fd5b611d5f85828601611fe7565b828152604060208201525f611fdf6040830184611d8b565b6001600160a01b039190911681526040602082018190526013908201527254616d706572696e672077697468206461746160681b606082015260800190565b6001600160a01b03919091168152604060208201819052601b908201525f80516020612459833981519152606082015260800190565b5f60018201612411576124116122c7565b5060010190565b604081525f61242a6040830185611d8b565b828103602084015261243c8185611d8b565b95945050505050565b818103818111156122ee576122ee6122c756fe556e617574686f72697a65642061636365737320617474656d707400000000003fc8de32d0ff2767d320c8c52fd3ab1a29ddf9484b23575845d542369bdfa37fa264697066735822122089005092dd47a28a4b638eea200b7645155cf46e599d80d788f66d1c4529a06f64736f6c63430008150033a2646970667358221220ef316116ede035c083dbcad2ec3e310c83ffdb420526f6ef384e6d1b59c29d3364736f6c63430008150033";

    private static String librariesLinkedBinary;

    public static final String FUNC_JUDGECONTRACT = "judgeContract";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGİSTERCONTRACT = "registerContract";

    public static final String FUNC_RENOUNCEOWNERSHİP = "renounceOwnership";

    public static final String FUNC_ROLEBASEDACCESSCONTROL = "roleBasedAccessControl";

    public static final String FUNC_TRANSFEROWNERSHİP = "transferOwnership";

    public static final String FUNC_DEPLOYACCESSCONTROLCONTRACT = "deployAccessControlContract";

    public static final Event ACCDEPLOYED_EVENT = new Event("ACCDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHİPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected AccessControlFactory(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccessControlFactory(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AccessControlFactory(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AccessControlFactory(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ACCDeployedEventResponse> getACCDeployedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCDEPLOYED_EVENT, transactionReceipt);
        ArrayList<ACCDeployedEventResponse> responses = new ArrayList<ACCDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ACCDeployedEventResponse typedResponse = new ACCDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ACCDeployedEventResponse getACCDeployedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCDEPLOYED_EVENT, log);
        ACCDeployedEventResponse typedResponse = new ACCDeployedEventResponse();
        typedResponse.log = log;
        typedResponse.accAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.owner = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ACCDeployedEventResponse> aCCDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getACCDeployedEventFromLog(log));
    }

    public Flowable<ACCDeployedEventResponse> aCCDeployedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCDEPLOYED_EVENT));
        return aCCDeployedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHİPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHİPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<String> judgeContract() {
        final Function function = new Function(FUNC_JUDGECONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> registerContract() {
        final Function function = new Function(FUNC_REGİSTERCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHİP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> roleBasedAccessControl() {
        final Function function = new Function(FUNC_ROLEBASEDACCESSCONTROL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHİP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deployAccessControlContract(String objectAddress,
            String subjectAddress, String accType) {
        final Function function = new Function(
                FUNC_DEPLOYACCESSCONTROLCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, objectAddress), 
                new org.web3j.abi.datatypes.Address(160, subjectAddress), 
                new org.web3j.abi.datatypes.Utf8String(accType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AccessControlFactory load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControlFactory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AccessControlFactory load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControlFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AccessControlFactory load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AccessControlFactory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AccessControlFactory load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AccessControlFactory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AccessControlFactory> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String initialAdmin,
            String _roleBasedAccessControl, String _registerContract, String _judgeContract) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialAdmin), 
                new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract)));
        return deployRemoteCall(AccessControlFactory.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<AccessControlFactory> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String initialAdmin, String _roleBasedAccessControl, String _registerContract,
            String _judgeContract) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialAdmin), 
                new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract)));
        return deployRemoteCall(AccessControlFactory.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccessControlFactory> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String initialAdmin,
            String _roleBasedAccessControl, String _registerContract, String _judgeContract) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialAdmin), 
                new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract)));
        return deployRemoteCall(AccessControlFactory.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccessControlFactory> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String initialAdmin, String _roleBasedAccessControl, String _registerContract,
            String _judgeContract) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, initialAdmin), 
                new org.web3j.abi.datatypes.Address(160, _roleBasedAccessControl), 
                new org.web3j.abi.datatypes.Address(160, _registerContract), 
                new org.web3j.abi.datatypes.Address(160, _judgeContract)));
        return deployRemoteCall(AccessControlFactory.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ACCDeployedEventResponse extends BaseEventResponse {
        public String accAddress;

        public String owner;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
